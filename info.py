from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions, CallbackQuery
from pyrogram.enums import ChatMemberStatus

API_ID = 28795512  # рдЕрдкрдиреЗ Telegram API ID рд╕реЗ рдмрджрд▓реЗрдВ
API_HASH = "c17e4eb6d994c9892b8a8b6bfea4042a"  # рдЕрдкрдиреЗ Telegram API Hash рд╕реЗ рдмрджрд▓реЗрдВ
BOT_TOKEN = "7589052839:AAGPMVeZpb63GEG_xXzQEua1q9ewfNzTg50"

app = Client("moderation_bot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# тЬЕ **Ban, Mute, Warn Actions (Callback)**
@app.on_callback_query(filters.regex(r"action_(\w+)_(\d+)"))
async def handle_actions(client: Client, query: CallbackQuery):
    action, user_id = query.matches[0].group(1), int(query.matches[0].group(2))
    chat_id = query.message.chat.id

    try:
        if action == "ban":
            await client.ban_chat_member(chat_id, user_id)
            await query.answer("ЁЯЪл рдпреВрдЬрд░ рдмреИрди рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛!", show_alert=True)
        elif action == "mute":
            await client.restrict_chat_member(chat_id, user_id, ChatPermissions(can_send_messages=False))
            await query.answer("ЁЯФЗ рдпреВрдЬрд░ рдореНрдпреВрдЯ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛!", show_alert=True)
        elif action == "warn":
            warning_text = f"тЪая╕П рдЪреЗрддрд╛рд╡рдиреА: <a href='tg://user?id={user_id}'>рдпрд╣ рдпреВрдЬрд░</a> рдирд┐рдпрдо рддреЛрдбрд╝ рд░рд╣рд╛ рд╣реИ!"
            await client.send_message(chat_id, warning_text, parse_mode="html")
            await query.answer("тЪая╕П рдпреВрдЬрд░ рдХреЛ рдЪреЗрддрд╛рд╡рдиреА рджреА рдЧрдИ!", show_alert=True)
        else:
            await query.answer("тЭМ рдХреЛрдИ рдПрдХреНрд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛!", show_alert=True)
    except Exception as e:
        await query.answer(f"тЭМ рдПрд░рд░: {e}", show_alert=True)

# тЬЕ **Admin Panel (Ban, Mute, Warn, Profile)**
@app.on_message(filters.command("adminpanel") & filters.group)
async def admin_panel(client, message):
    if not message.reply_to_message:
        await message.reply_text("тЭМ рдХреГрдкрдпрд╛ рдкрд╣рд▓реЗ рдХрд┐рд╕реА рдпреВрдЬрд░ рдХреЛ рд░рд┐рдкреНрд▓рд╛рдИ рдХрд░реЗрдВред")
        return

    user = message.reply_to_message.from_user

    buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("ЁЯЪл Ban", callback_data=f"action_ban_{user.id}"),
            InlineKeyboardButton("ЁЯФЗ Mute", callback_data=f"action_mute_{user.id}")
        ],
        [
            InlineKeyboardButton("тЪая╕П Warn", callback_data=f"action_warn_{user.id}"),
            InlineKeyboardButton("ЁЯСд Info", callback_data=f"action_info_{user.id}")
        ],
        [
            InlineKeyboardButton("ЁЯФН Profile", url=f"https://t.me/{user.username}") if user.username else InlineKeyboardButton("тЭМ рдХреЛрдИ рдпреВрдЬрд░рдиреЗрдо рдирд╣реАрдВ", callback_data="no_username")
        ]
    ])

    await message.reply_text(f"ЁЯФз <b>рдореЙрдбрд░реЗрд╢рди рдкреИрдирд▓</b> - {user.mention}", reply_markup=buttons, parse_mode="html")

# тЬЕ **User Full Information (Fixes)**
@app.on_callback_query(filters.regex(r"action_info_(\d+)"))
async def user_info(client, query: CallbackQuery):
    user_id = int(query.matches[0].group(1))
    chat_id = query.message.chat.id
    chat_member = await client.get_chat_member(chat_id, user_id)
    user = chat_member.user

    is_muted = (
        chat_member.status == ChatMemberStatus.RESTRICTED and
        chat_member.privileges and not chat_member.privileges.can_send_messages
    )

    warnings = 0  # рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдХреА рд╕рдВрдЦреНрдпрд╛ (рдбреЗрдореЛ рдХреЗ рд▓рд┐рдП)

    text = (
        "ЁЯУЬ User Full Information ЁЯУЬ\n\n"
        f"ЁЯЖФ ID: {user.id}\n"
        f"ЁЯР▒ Name: {user.first_name or 'No Name'}\n"
        f"ЁЯМН Username: @{user.username if user.username else 'No username'}\n"
        f"ЁЯСА Situation: {'Admin' if chat_member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER] else 'Member'}\n"
        f"тЪая╕П Warnings: {warnings}/3\n"
        f"ЁЯФЗ Muted: {'Yes' if is_muted else 'No'}\n"
        f"тП│ Join Date: {chat_member.joined_date.strftime('%Y-%m-%d %H:%M:%S') if hasattr(chat_member, 'joined_date') and chat_member.joined_date else 'Unknown'}\n"
    )

    await query.message.reply_text(text)

# тЬЕ **Bot Run (рдПрд░рд░ рдлрд┐рдХреНрд╕)**
if __name__ == "__main__":
    print("ЁЯдЦ Bot is running...")
    app.run()
